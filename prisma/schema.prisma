// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @unique @default(uuid())
  username      String       @unique @db.VarChar(50)
  email         String       @unique @db.VarChar(100)
  firstName     String       @db.VarChar(50)
  lastName      String       @db.VarChar(50)
  fullName      String       @db.VarChar(110)
  password      String       @db.VarChar(64)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  recipes       Recipe[]
  gender        Gender?
  unitSettingId String?
  unitSetting   UnitSetting?
  followedBy    User[]       @relation("UserFollows")
  following     User[]       @relation("UserFollows")
  role          Role?
  viewer        Viewer[]
}

model Role {
  id         String   @id @unique @default(uuid())
  name       String   @db.VarChar(150)
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @unique
  permission String[] @unique @db.VarChar(300)
}

model UnitSetting {
  id        String  @id @unique @default(uuid())
  name      String  @db.VarChar(150)
  volume    String
  mass      String
  dimension String
  distance  String
  User      User?   @relation(fields: [userId], references: [id])
  userId    String? @unique
}

model Gender {
  id          String @id @unique @default(uuid())
  name        String @db.VarChar(150)
  description String @db.VarChar(2000)
  slug        String @db.VarChar(200)
  User        User   @relation(fields: [userId], references: [id])
  userId      String @unique
}

model Recipe {
  id           String        @id @unique @default(uuid())
  name         String        @db.VarChar(500)
  requirements Requirement[]
  upvote       Int           @default(0)
  downVote     Int           @default(0)
  reactions    Reaction[]
  comments     Comment[]
  categories   Category[]
  User         User          @relation(fields: [userId], references: [id])
  userId       String
  viewer       Viewer[]
}

model Viewer {
  id String @id @unique @default(uuid())

  viewDate DateTime
  Recipe   Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId String?
  userId   String?
  User     User?    @relation(fields: [userId], references: [id])
}

model Reaction {
  id       String @id @unique @default(uuid())
  type     String
  Recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model Comment {
  id       String @id @unique @default(uuid())
  Recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model Requirement {
  id         String      @id @unique @default(uuid())
  quantity   Int
  Recipe     Recipe      @relation(fields: [recipeId], references: [id])
  recipeId   String
  unitId     String      @db.Char(128)
  ingredient Ingredient?
}

model Category {
  id          String   @id @unique @default(uuid())
  name        String   @db.VarChar(200)
  description String   @db.VarChar(2000)
  recipies    Recipe[]
}

model Ingredient {
  id            String      @id @unique @default(uuid())
  name          String      @db.VarChar(500)
  description   String      @db.VarChar(2000)
  Requirement   Requirement @relation(fields: [requirementId], references: [id])
  requirementId String      @unique
}
